defmodule Foeder.Ash.Todos do
  # This turns this module into a resource
  use Ash.Resource,
    data_layer: AshPostgres.DataLayer

  postgres do
    table "todo"
    repo Foeder.Ash.Repo
  end

  code_interface do
    define_for Foeder.Ash.Registry

    define :todo, args: [:text]
  end

  actions do
    # Add a set of simple actions. You'll customize these later.
    defaults [:create, :read, :update, :destroy]

    create :todo do
      accept [:text]
    end

  end

  # Attributes are the simple pieces of data that exist on your resource
  attributes do
    # Add an autogenerated UUID primary key called `:id`.
    uuid_primary_key :id

    attribute :text, :string do
      allow_nil? false
    end

    # status is either `open` or `closed`. We can add more statuses later
    attribute :done, :boolean do
      default :false
      allow_nil? false
    end

    attribute :high_priority, :boolean do
      default :false
      allow_nil? true
    end


  end

#  relationships do
#    # belongs_to means that the destination attribute is unique, meaning only one related record could exist.
#    # We assume that the destination attribute is `representative_id` based
#    # on the name of this relationship and that the source attribute is `representative_id`.
#    # We create `representative_id` automatically.
#    belongs_to :representative, Helpdesk.Support.Representative
#  end
end

