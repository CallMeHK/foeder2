defmodule Foeder.Ash.Todos do
  # This turns this module into a resource
  use Ash.Resource,
    data_layer: AshPostgres.DataLayer

  postgres do
    table "todo"
    repo Foeder.Ash.Repo
  end

  # to update any value, pass a dict   entity |> Ash.Changeset.for_update(:update, %{high_priority: true}) |> Foeder.Ash.update()
  # destroy: todo |> Ash.Changeset.for_destroy(:destroy) |> Foeder.Ash.destroy()
  code_interface do
    define_for Foeder.Ash

    define :todo, args: [:text, :user_id]
    define :user_todos, args: [:user_id]
    define :get_one, args: [:id, :user_id]
    define :done, args: []
    define :destroy, args: []
    define :update
  end

  actions do
    # Add a set of simple actions. You'll customize these later.
    defaults [:create, :read, :update, :destroy]


    read :get_one do
      argument :id, :uuid do
        allow_nil? false
      end
      argument :user_id, :integer do
        allow_nil? false
      end

      filter expr(user_id == ^arg(:user_id) and id == ^arg(:id))
    end

    read :user_todos do
      argument :user_id, :integer do
        allow_nil? false
      end

      filter expr(user_id == ^arg(:user_id))
    end

    create :todo do
      accept [:text, :user_id]
    end

    update :done do
      accept []
      change set_attribute(:done, true)
    end

  end

  # Attributes are the simple pieces of data that exist on your resource
  attributes do
    # Add an autogenerated UUID primary key called `:id`.
    uuid_primary_key :id

    attribute :text, :string do
      allow_nil? false
    end

    # status is either `open` or `closed`. We can add more statuses later
    attribute :done, :boolean do
      default :false
      allow_nil? false
    end

    attribute :high_priority, :boolean do
      default :false
      allow_nil? true
    end

    attribute :user_id, :integer do
      allow_nil? false
    end

    create_timestamp :created_at
    update_timestamp :updated_at

  end

  relationships do
    # belongs_to means that the destination attribute is unique, meaning only one related record could exist.
    # We assume that the destination attribute is `representative_id` based
    # on the name of this relationship and that the source attribute is `representative_id`.
    # We create `representative_id` automatically.
    belongs_to :user, Foeder.Ash.User
  end
end

